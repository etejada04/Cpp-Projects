/**
 * @file CTableControl.h
 * @author tejadede
 * @brief Table controller file header
 */
#ifndef __CTABLECONTROL_H__
#define __CTABLECONTROL_H__
#include <ncurses.h>
#include <fstream>
#include <iostream>
#include <string>
#include "CControllers.h"
#include "CTable.h"
#include "CRun.h"
using namespace std;
/**
 * @class CTableControl
 * @brief This class handles all the main functions of the spreadsheet such as
 * insert, update and navigate around the table.
 */
class CTableControl: public CControllers {
private:
    int m_row, m_col, m_rowInitPos, m_colInitPos;
    CTable m_table; /**< Table with cells*/
    std::string m_err; /**< Error message used for loading/saving*/
    /**
     * @brief This method gets the current position of the cell, the changes of the
     * position are visible at the top-left corner (i.e. Cell (R#;C#) ), where R
     * represents the n-th row and C represents the n-th column.
     */
    void GetPosition() const;
    /**
     * @brief This method gets the value of the current cell, this is also visible
     * at the top-left corner, after the position of the cell.
     */
    void GetValue () const;
    /**
     * @brief This method gets the mathematical expression of the current cell.
     */
    void GetExpression () const;
    /**
     * @brief This method displays or process the data generated by methods GetPosition,
     * GetValue and GetExpression.
     */
    void GetHeader () const;
    /**
     * @brief This method displays all the table.
     */
    void GetTable () ;
    /**
     * @brief This method displays the menu at the bottom-left corner, this menu has the
     * keys to insert, change to help window  or quit the program.
     */
    void GetMenu () const;
    /**
     * @brief This method changes the current location of the cell in the table.
     * @param row Denotes the row number
     * @param col Denotes the column number
     */
    void ChangePosition (int row, int col);
    /**
     * @brief This method inserts a expression at the current cell position.
     */
    void InsertExpression ();
    /**
     * @brief This method saves the table into a file, if an error occurs then an error
     * message is displayed.
     */
    void SaveFile ();
    /**
     * @brief This method loads a file and created a table, if an error occurs then an error
     * message is displayed.
     */
    void LoadFile ();
public:
    /**
     * @brief CTableControl constructor.
     */
    CTableControl ();
    /**
     * @brief CTableControl destructor.
     */
    virtual ~CTableControl ();
    /**
     * @brief This method handles the keys to insert, display help menu and
     * quit the program.
     * @param key Denotes the key value
     */
    virtual void KeyHandler (int key);
    /**
     * @brief This method to displays the TABLE view.
     */
    virtual void MakeView ();
};
#endif //__CTABLECONTROL_H__